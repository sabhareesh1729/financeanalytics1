rollno=paste('S',1:30,sep='-')
rollno
name=paste('Student',1:30,sep='','-','xyz')
name
set.seed(100)
gender=sample(c('M','F'),prob=0.5)
gender=sample(c('M','F'),prob=0.5,replace=T)
gender=sample(c('M','F'),replace=T,prob=0.5)
gender=sample(c('M','F'),replace=T,prob=c(0.5,0.5))
gender
gender=sample(c('M','F'),size=30,replace=T,prob=c(0.5,0.5))
gender
(runif(3,10,20))
(rnorm(3,50,10))
?runif
age=sample(c(20:40),size = 30,replace=T, rbinom())
?runif
runif(30,20,40)
age=runif(30,20,40)
agernorm(30,0,)
age
marks=rnorm(30,0,100)
marks
?rnorm
marks=rnorm(30,mean=50,sd=10)
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
gender=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.5,0.5))
gender
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.5,0.5))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
gender=sample(c('M','F'),size=30,replace=T,prob=c(0.5,0.5))
gender
#age=sample(c(20:40),size = 30,replace=T, rbinom())
?runif
?rnorm
age=round(runif(30,20,40))
age
marks=round(rnorm(30,mean=50,sd=20))
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.5,0.5))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
age
marks=round(rnorm(30,mean=50,sd=20))
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.6,0.4))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
(name1=paste0())
?pate0
?paste0
(name1=paste0('Student',1:30,sep='','- xyz'))
name=paste('Student',1:30,sep='','-',' xyz')
name
#Time Series Analysis
# is the price of Johnson and Johnson stock
rollno=paste('S',1:30,sep='-')
rollno
name=paste('Student',1:30,sep='','-',' xyz')
name
(name1=paste0('Student',1:30,sep='','- xyz'))
set.seed(100)
gender=sample(c('M','F'),size=30,replace=T,prob=c(0.5,0.5))
gender
?rnorm
age=round(runif(30,20,40))
age
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
marks=round(rnorm(30,mean=50,sd=20))
#age=sample(c(20:40),size = 30,replace=T, rbinom())
?runif
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.6,0.4))
?paste0
married
df
df=data.frame(rollno,name,gender,age,course,marks,married)
?rnorm
marks=round(rnorm(30,mean=50,sd=20,max=100,min=0))
marks=round(rnorm(30,mean=50,sd=10,max=100,min=0))
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.6,0.4))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
paste('R',1:3)
paste0('R',1:3)
gender=sample(c('M','F'),size=30,replace=T,prob=c(0.7,0.3))
gender
#age=sample(c(20:40),size = 30,replace=T, rbinom())
?runif
?rnorm
age=round(runif(30,20,40))
age
marks=round(rnorm(30,mean=50,sd=10,max=100,min=0))
marks
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
course
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.6,0.4))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
#Time Series Analysis
# is the price of Johnson and Johnson stock
rollno=paste('S',1:30,sep='-')
rollno
name=paste('Student',1:30,sep='','-',' xyz')
name
(name1=paste0('Student',1:30,sep='','- xyz'))
?paste0
paste('R',1:3)
paste0('R',1:3)
set.seed(100)
gender=sample(c('M','F'),size=30,replace=T,prob=c(0.7,0.3))
gender
#age=sample(c(20:40),size = 30,replace=T, rbinom())
?runif
?rnorm
age=round(runif(30,20,40))
age
marks=round(rnorm(30,mean=50,sd=10))
marks
course
course=sample(c('BTech','MTech','Phd'),size=30,replace=T,prob=c(0.5,0.3,0.2))
married=sample(c('TRUE','FALSE'),size=30,replace=T,prob=c(0.6,0.4))
married
df=data.frame(rollno,name,gender,age,course,marks,married)
df
set.seed(2000)
split=sample.split(df, SplitRatio = 0.75)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
library(caTools)
set.seed(2000)
split=sample.split(df, SplitRatio = 0.75)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
training_set=subset(df, split==TRUE)  #Split as we need
test_set=subset(df, split==FALSE)
training_set
test_set
nrow(training_set)
set.seed(2000)
split=sample.split(df, SplitRatio = 0.7)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
training_set=subset(df, split==TRUE)  #Split as we need
test_set=subset(df, split==FALSE)
training_set
test_set
nrow(training_set)
split=sample.split(df, SplitRatio = 0.7)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
training_set=subset(df, split==TRUE)  #Split as we need
test_set=subset(df, split==FALSE)
training_set
test_set
split
nrow(training_set)
library(caTools)
set.seed(2000)
split=sample.split(df, SplitRatio = 0.7)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
training_set=subset(df, split==TRUE)  #Split as we need
test_set=subset(df, split==FALSE)
training_set
test_set
nrow(training_set)
nrow(test_set)
library(caTools)
set.seed(2000)
split=sample.split(df, SplitRatio = 0.75)  #Make two partitions with 75% in one partition and 25% in another, so that we can have a test set and a training set randomly
training_set=subset(df, split==TRUE)  #Split as we need
test_set=subset(df, split==FALSE)
training_set
test_set
nrow(training_set)
nrow(test_set)
names(training_set)
#Other way
sample(nrow(df),3)
df1=df[sample(nrow(df),3),]
df1
(df2=subset(df.age>=20&age<27,select=c(rollno,name)))
(df2=subset(df,age>=20&age<27,select=c(rollno,name)))
(df2=subset(df,age>=20&age<27,select=c(rollno,name,age)))
#dplyr
(df3=sample_n(df,10))
#dplyr
library(dplyr)
(df3=sample_n(df,10))
(df4=sample_frac(df,0.5))
df5=df[which(gender=='F'&age>25),]
df5
(df2=subset(df,age>=20&age<27,select=c(rollno,name,age)))
(df2=subset(df,age>=20&age<27,select=c(rollno,name,age)))  #Subset where age is between 20 and 27 and with only rollno, name and age columns
#There is no byrow as argument, but we have transpose function
(myarray=array(1:24, dim=c(4,3,2), dimnames=list(c('S1','S2','S3','S4'),c('Sub1','Sub2','Sub3').c('Dept1','Dept2'))))
#There is no byrow as argument, but we have transpose function
(myarray=array(1:24, dim=c(4,3,2), dimnames=list(c('S1','S2','S3','S4'),c('Sub1','Sub2','Sub3'),c('Dept1','Dept2'))))
myarray
(myarray=array(1:24, dim=c(4,3,2)))
apply(myarray,1,sum) #Apply function to calculate some value according to some dimension
install.packages('xlxs')
install.packages('xlsx')
library(xlsx)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jrel.8.0_144")
library(xlsx)
install.packages('xlsx')
library(xlsx)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_144")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_144")
library(xlsx)
write.xlsx(df,'./data/student1.xlsx',sheetName)
#Now let us save this into the excel file
write.csv(df,'./data/students3.csv')
write.xlsx(df,'./data/student1.xlsx',sheetName="IITG1", row.names=F, append=T)
#Twitter 1 - Working using my Keys
install.packages('curl')
install.packages('twitter')
install.packages('twitteR')
install.packages('ROAth')
install.packages('ROAuth')
library("curl")
library("twitteR")
library("ROAuth")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
#different for each account
consumerKey="uRDuync3BziwQnor1MZFBKp0x"
consumerSecret="t8QPLr7RKpAg4qa7vth1SBsDvoPKawwwdEhNRjdpY0mfMMdRnV"
AccessToken="14366551-Fga25zWM1YefkTb2TZYxsrx2LVVSsK0uSpF08sugW"
AccessTokenSecret="3ap8BZNVoBhE2GaMGLfuvuPF2OrHzM3MhGuPm96p3k6Cz"
cred <- OAuthFactory$new(consumerKey=consumerKey, consumerSecret=consumerSecret, requestURL='https://api.twitter.com/oauth/request_token', accessURL='https://api.twitter.com/oauth/access_token', authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem") # it will take browser
#Load saved authentication cert
load("twitter authentication.Rdata")
setup_twitter_oauth(consumerKey, consumerSecret, AccessToken, AccessTokenSecret)
#date in yyyy-mm-dd
dates1a = c('2018-19-1', '2018-20-1')
class(dates1a)
#date in yyyy-mm-dd
dates1a = c('2018-19-1', '2018-20-1')   #It is in character form
class(dates1a)
?as.Date
as.Date(dates1a)  # error
dates1b = as.Date(dates1a, format='%Y-%d-%m')
class(dates1b)
as.Date(dates1a)  # error, because the default format is %y-%m-%d
dates1b = as.Date(dates1a, format='%Y-%d-%m')
class(dates1b)
dates1b
dates1c = as.Date(dates1a, format='%y-%d-%m')
dates1c
dates1b = as.Date(dates1a, format='%Y-%d-%m')
dates1b = as.Date(dates1a, format='%Y-%d-%m')
dates1c = as.Date(dates1a, format='%y-%d-%m')
class(dates1b)
dates1b
dates1c
#default format
dates2a = c('2018-4-9')
#default format
dates2a = c('2018-4-9')
class(dates2a)
(dates2b = as.Date(dates2a))
class(dates2b)
print(dates2b, format=('%d-%m-%Y'))
dates1c = as.Date(dates1a, format='%y-%d-%m')
dates1c
print(dates2b, format=('%d-%m-%Y'))
format(dates2b, format=('%d-%m-%Y'))
format(Sys.Date(), format="%A: %d %B")
format(Sys.Date(), format="%A: %d %B %y")
#System Date
Sys.Date()
format(Sys.Date(), format="%A: %d %B %y")
format(dates2b, format="%A  %d  %m  %y")
#increment/ decrement dates
dates2b
cfap = dates2b + 0:5
cfap
cat(format(cfap, format="%B-%d"))
(format(cfap, format="%B-%d"))
months(cfap)
weekdays(cfap)
quarters(cfap)
#Date to character
dtoc = as.character(dates2b)
class(dtoc)
#one more practise on date format
dates3a =as.Date('30Mar18',format("%d%b%y"))
class(dates3a)
#Difference in dates
cfap
min(cfap)
max(cfap)
range(cfap)
mean(cfap)
median(cfap)
cfap[c(1,5)]
cfap[c(1:5)]
cfap[c(1,5)]
(duration = cfap[5] - cfap[1])
(duration = max(cfap[5]) - min(cfap[1]))
(duration = max(cfap) - min(cfap))
min(cfap)
max(cfap)
cfap[c(1,5)]
seq(as.Date("2016/1/1"), as.Date("2018/1/1"), "years")
## by month
seq(as.Date("2017/1/1"), by = "month", length.out = 12)
## quarters
seq(as.Date("2017/1/1"), as.Date("2018/1/1"), by = "quarter")
#Find 7th of all months between two dates
dateseq = seq(as.Date("2018/1/7"), as.Date("2017/1/7"), by = "-1 month")
rev(dateseq)
format(rev(dateseq), "%A : %d-%b")
#another Sequence
chron::seq.dates("01/01/2017", "12/31/2017", by = "months")
install.packages('chron')
#install.packages('chron')
#another Sequence
chron::seq.dates("01/01/2017", "12/31/2017", by = "months")
chron::seq.dates("01/01/2017", "12/31/2017", by = "weeks")
#Time Series using Library Time series
install.packages('timeSeries')
#Time Series using Library Time series
#install.packages('timeSeries')
#TS using Library Time Series
#https://www.statmethods.net/advstats/timeseries.html read this
library(timeSeries)
# Create Time Series data of Finance Sales
sales = c(18, 33, 41, 7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
length(sales)
#base package of ts
(tsales = ts(sales, start=c(2016,4), end=c(2018,4), frequency=24)) # period diveded into 24 equal intervals
is.timeSeries(tsales)
tsales2 = as.timeSeries(tsales)
class(tsales)
is.timeSeries(tsales)
tsales2 = as.timeSeries(tsales)
tsales2
length(sales)
# Create Time Series data of Finance Sales
sales = c(18, 33, 41, 7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
length(sales)
#?ts  - help
#No of obsv per unit time
(tsales2a = ts(sales, start=1, end=12)) #only first 12 considered
(tsales2b = ts(sales, start=1, end=6)) #only first 6
(tsales2c = ts(sales, start=1, end=24)) #all 24
(tsales2d = ts(sales, start=1, end=12, frequency = 1))
#Specify data periods in start and end
#specify only start dates & freq
(tsales3a = ts(sales, start=c(2017, 1), frequency=12)) # years 2017 to 2018, 24 values, monthwise
?ts
#Specify start and end date periods
(tsales3b = ts(sales, start=c(2016,4), end=12) ) #error start and end to be of same format
(tsales3b = ts(sales, start=c(2016), end=c(2018))) # default freq=1 once a year 1st 3 values becomes year sales value
(tsales3c = ts(sales, start=c(2016,4), end=c(2018,4), frequency=24)) # period diveded into 24 equal intervals
# Daily Sales Data
sales2 = ceiling(runif(365, 50,100))
(dailyTSdata <- ts(sales2, start=c(2017,1), frequency=365))
plot(dailyTSdata)
start(dailyTSdata)
#Weekly Sales Data  52 weeks in a year
sales3 = ceiling(runif(52, 50,100))
(weeklyTSdata <- ts(sales3, start=c(2017,3), frequency=52))
plot(weeklyTSdata)
plot(weeklyTSdata)
start(weeklyTSdata); end(weeklyTSdata) ;frequency(weeklyTSdata)
#Yearly Sales Data : 2000 to 2017
seq(1,20, along.with = c(1:5))
values= trunc(seq(1,20, along.with = c(2000:2017)))
#Yearly Sales Data : 2000 to 2017
seq(1,20, along.with = c(1:5))   #Divide into 5 equal parts
seq(1,20, along.with = 5)
seq(1,20, along.with = 5)
?along.with
?seq
?seq
values= trunc(seq(1,20, along.with = c(2000:2017)))
(sales4 = floor(rnorm(values, mean=50, sd=10)) ) #pick up length from values
(yearlyTSdata <- ts(sales4, start=c(2000), end=c(2017)))
plot(yearlyTSdata)
start(yearlyTSdata); end(yearlyTSdata) ;frequency(yearlyTSdata)
#diff and lag & window in ts
tsales3c
tsales = tsales3c
tsales
range(tsales)
diff(tsales)
diff(tsales,lag=1)
tsales
diff(tsales,lag=1)
diff(tsales)    #TO see the difference between sales on different days
diff(tsales,lag=2)   #To see the difference of the sales of days differing by 2
tsales
#subset Time Series with range of dates
(tsales.subset = window(tsales, start=c(2003, 5), end=c(2004, 6))) #error due to range period incorrect
tsales
(tsales.subset = window(tsales, start=c(2016, 5), end=c(2016, 8)))
#dataset----
#available for TS Analysis - understand them, they are used for TS analysis
AirPassengers  #passengers travel data - seasonal data
plot(AirPassengers)
plot(JohnsonJohnson)
plot(Nile)
plot(sunspots)
# Time Series Case Study
#https://rpubs.com/emb90/137525
# Data Set - AirPassengers
options(digits=2)
# TS data components : Level + Irregular + Seasonal
#stl(x, s.window, t.window = ) # command to do decomp
stl(AirPassengers, s.window = 'periodic')
#dataset
AirPassengers
class(AirPassengers)
# Plot
plot(AirPassengers)
#stabilise the plot
LogAirPassengers = log(AirPassengers)  # make it additive
# YA = T + S + I  :
#YM= T * S * I  : take log of this
# log(YM) = log(T) + log(S) +log(I)
plot(LogAirPassengers)  #stabilises variation due to multiplication
#looks like additive
(m1 = matrix(1:2, nrow=1, byrow = F))
layout(m1)
plot(AirPassengers); plot(LogAirPassengers)
# Time Series Case Study
#https://rpubs.com/emb90/137525
# Data Set - AirPassengers
options(digits=2)
# TS data components : Level + Irregular + Seasonal
#stl(x, s.window, t.window = ) # command to do decomp
stl(AirPassengers, s.window = 'periodic')
head(AirPassengers)
stl1=stl(AirPassengers, s.window = 'periodic')
plt(stl1)
plot(stl1)
Nile
#AUTO ARIMA
#forecast::auto.arima()
fit4=auto.arima(Nile)
forecast::auto.arima()
#AUTO ARIMA
forecast(fit3,4)
#AUTO ARIMA
?forecast
#AUTO ARIMA
library(forecast)
forecast::auto.arima()
fit4=auto.arima(Nile)
#forecast::auto.arima()
fit4=auto.arima(Nile)
fit4
forecast(fit4,5)
plot=forecast(fit4,5)
plot(forecast(fit4,5))
plot(forecast(fit4,50))
install.packages('Quandl')
#install.packages('Quandl')
library(Quandl)
library(Quandl)
Quandl.api_key("4D8hkYAV4WEkcTmD9LMW")
## Download the data Set
ICICI = Quandl("NSE/ICICIBANK",collapse="daily",start_date="2017-09-01",type="raw")
PNB= Quandl("NSE/PNB",collapse="daily",start_date="2017-09-01",type="raw")
SBI=Quandl("NSE/SBIN",collapse="daily",start_date="2017-09-01",type="raw")
## Add another ("Stock") column in Datasets using cbind command
head(ICICI)
ICICI$Stock = "ICICI"
PNB$Stock = "PNB"
SBI$Stock = "SBI"
SBI
allstocks = rbind(ICICI, PNB, SBI)
str(allstocks)
allstocks$Stock = factor(allstocks$Stock)
str(allstocks)
str(allstocks)
str(allstocks)
allstocks$Stock = factor(allstocks$Stock)
str(allstocks)
names(allstocks)
names(allstocks)[c(7,8)] = c('Qty','Turnover')
names(allstocks)
#Using Aggregations
names(allstocks)
aggregate(allstocks$Close, by=list(allstocks$Stock), mean)
aggregate(cbind(Close,  Open) ~ Stock , data= allstocks, mean)
A=c(1,1.5,3,5,3.5,4.5,3.5)
B=c(1,2,4,7,5,5,4.5)
marks=data.frame(A,B)
marks
(c1 = kmeans(marks, 3))  #??
c1$iter
cbind(marks, c1$cluster)
plot(marks, pch=10,col = c1$cluster)
c1$centers
points(c1$centers, col = 1:3, pch = 8, cex = 5)
c1$iter #?
#Clustering - Simple dataset - Marks in 2 subjects
install.packages('amap')
